#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <sys/stat.h>
#include <time.h>
#include <semaphore.h>

// A structure to track system resources
typedef struct resources
{

	int available[100][100]; // The availible amount of each resource
	int max[100][100];		 // The maximum demand of each customer
	int allocated[100][100]; // The amount currently allocated to each customer
	int need[100][100];		 // The remaining need of each customer
	int n;					 // # of customers (used to size matrix)
	int m;					 // # of unique resources (used to size matrix)

} Resources;

// Function Declarations
char *readFile(char *file_name);				  // Function to read from sample4_in.txt
int populateResourcesStruct(char *resource_data); // Creates and populates a Resources struct

// Global Variables
char lines[20][100];
Resources data;
sem_t mutexalloc; 
sem_t mutexavail; 
sem_t mutexneed; 
//int check_safe(Resources* data);
// Main
int main(int argc, char *argv[])
{

	// Read from sample4_in.txt
	char *resource_data;
	resource_data = readFile(argv[1]);

	// Create and populate resources structure
	populateResourcesStruct(resource_data);
	sem_init(&mutexalloc,0,1);
	sem_init(&mutexavail,0,1);
	sem_init(&mutexneed,0,1);
	// Print out values of data.max array (for testing)
	int i = 0;
	int j = 0;
	while (i < data.n)
	{
		while (j < data.m)
		{

			printf("%d, ", data.max[i][j]);

			j++;
		}
		printf("\n");
		j = 0;
		i++;
	}
	//request[data.m];

	return 0;
}

char *readFile(char *file_name)
{

	// Open file
	FILE *in = fopen(file_name, "r");

	// Check that file has opened correctly
	if (!in)
	{
		printf("Child A: Error in opening input file...exiting with error code -1\n");
		exit(0);
	}

	// Create dynamic array to hold file content
	struct stat st;
	fstat(fileno(in), &st);
	char *fileContent = (char *)malloc(((int)st.st_size + 1) * sizeof(char));
	fileContent[0] = '\0';

	// Loop through file and append contents to fileContent
	while (!feof(in))
	{
		char line[100];
		if (fgets(line, 100, in) != NULL)
		{
			strncat(fileContent, line, strlen(line));
			strcpy(lines[0], line);
		}
	}

	// Close file
	fclose(in);

	return fileContent;
}

int populateResourcesStruct(char *resource_data)
{

	// Track how many customer entries (lines) we have
	int num_customers = 0;
	int num_unique_resources = 0;

	// Store information
	char *temp_lines[100];

	// Seperate string by each line, save to temp_lines
	int i = 0;
	char *line = strtok(resource_data, "\n");

	while (line != NULL)
	{
		temp_lines[i] = line;
		line = strtok(NULL, "\n");

		num_customers++;
		i++;
	}

	// Seperate each line by commas, save to data.max[][]
	i = 0;
	int j = 0;
	char *c;

	while (i < num_customers)
	{
		c = strtok(temp_lines[i], ",");
		num_unique_resources = 0;

		while (c != NULL)
		{
			data.max[i][j] = atol(c);
			c = strtok(NULL, ",");

			num_unique_resources++;
			j++;
		}

		j = 0;
		i++;
	}

	// Save matrix dimensions to struct
	data.n = num_customers;
	data.m = num_unique_resources;

	return 0;
}

int release_resources(int customer_num, int request[])
{
	int i;
	for (i = 0; i < data.m; i++)
	{
		sem_wait(&mutexalloc);
		data.allocated[customer_num][i] -= request[i];
		sem_post(&mutexalloc);
		sem_wait(&mutexavail);
		data.available[i] += request[i];
		sem_post(&mutexavail);
		sem_wait(&mutexneed);
		data.need[customer_num][i] = data.maximum[customer_num][i] + data.allocated[customer_num][i];
		sem_post(&mutexneed);
	}
	return 1;
}

int check_safe()
{

	int ii, jj, work[data.m], finish[data.n];

	int success = 0;

	for (ii = 0; ii < data.m; ii++)
	{

		work[ii] = data.available[ii];
	}

	for (ii = 0; ii < data.n; ii++)
	{ //sets all finish to start at 0

		finish[ii] = 0;
	}

	for (ii = 0; ii < data.n; ii++)
	{

		if (finish[ii] == 0)
		{

			for (jj = 0; jj < data.m; jj++)
			{

				if (data.need[ii][jj] > work[jj])
					success = -1;
				return success;
			}

			for (jj = 0; jj < data.m; jj++)

				work[jj] += data.allocated[ii][jj];

			success = 1;
		}
	}

	return success;
}

